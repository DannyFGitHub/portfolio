/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { JSX, useRef } from "react";
import OpenBookUrl from "./OpenBook.glb";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Book: THREE.Mesh;
    BookHalf: THREE.Mesh;
    Paper: THREE.Mesh;
    Paper001: THREE.Mesh;
  };
  materials: {
    RedBookCover: THREE.MeshStandardMaterial;
    Paper: THREE.MeshStandardMaterial;
  };
};

export function OpenBook(
  props: JSX.IntrinsicElements["group"] & { closed?: boolean; color?: string }
) {
  const { nodes, materials } = useGLTF(OpenBookUrl) as GLTFResult;

  const bookHalfRef = useRef<THREE.Mesh>(null!);

  useFrame(() => {
    if (props.closed) {
      bookHalfRef.current.rotation.z = THREE.MathUtils.lerp(
        bookHalfRef.current.rotation.z,
        -Math.PI,
        0.025
      );
      bookHalfRef.current.position.y = THREE.MathUtils.lerp(
        bookHalfRef.current.position.y,
        0.016,
        0.025
      );
    } else {
      bookHalfRef.current.rotation.z = THREE.MathUtils.lerp(
        bookHalfRef.current.rotation.z,
        0,
        0.025
      );
      bookHalfRef.current.position.y = THREE.MathUtils.lerp(
        bookHalfRef.current.position.y,
        0,
        0.025
      );
    }
  });

  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="Book"
          castShadow
          receiveShadow
          geometry={nodes.Book.geometry}
          material={materials.RedBookCover}
          position={[0, 0, 0]}
          rotation={[0, 0, 0]}
          scale={[1.611, 1.611, 1.611]}
          userData={{ name: "Book" }}
        >
          <group ref={bookHalfRef}>
            <mesh
              name="BookHalf"
              castShadow
              receiveShadow
              geometry={nodes.BookHalf.geometry}
              material={materials.RedBookCover}
              userData={{ name: "BookHalf" }}
            />
            <mesh
              name="Paper"
              castShadow
              receiveShadow
              geometry={nodes.Paper.geometry}
              material={materials.Paper}
              userData={{ name: "Paper" }}
            />
          </group>
          <mesh
            name="Paper001"
            castShadow
            receiveShadow
            geometry={nodes.Paper001.geometry}
            material={materials.Paper}
            userData={{ name: "Paper.001" }}
          />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload(OpenBookUrl);
